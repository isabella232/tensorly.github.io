

.. _sphx_glr_auto_examples_decomposition_plot_image_compression.py:


Image compression via tensor decomposition
==========================================

Example on how to use :func:`tensorly.decomposition.parafac`and :func:`tensorly.decomposition.tucker` on images.




.. image:: /auto_examples/decomposition/images/sphx_glr_plot_image_compression_001.png
    :align: center





.. code-block:: python


    import matplotlib.pyplot as plt
    import tensorly as tl
    import numpy as np
    from scipy.misc import face, imresize
    from tensorly.decomposition import parafac
    from tensorly.decomposition import tucker
    from math import ceil


    random_state = 12345

    image = tl.tensor(imresize(face(), 0.3), dtype='float64')

    def to_image(tensor):
        """A convenience function to convert from a float dtype back to uint8"""
        im = tl.to_numpy(tensor)
        im -= im.min()
        im /= im.max()
        im *= 255
        return im.astype(np.uint8)

    # Rank of the CP decomposition
    cp_rank = 25
    # Rank of the Tucker decomposition
    tucker_rank = [100, 100, 2]

    # Perform the CP decomposition
    factors = parafac(image, rank=cp_rank, init='random', tol=10e-6)
    # Reconstruct the image from the factors
    cp_reconstruction = tl.kruskal_to_tensor(factors)

    # Tucker decomposition
    core, tucker_factors = tucker(image, ranks=tucker_rank, init='random', tol=10e-5, random_state=random_state)
    tucker_reconstruction = tl.tucker_to_tensor(core, tucker_factors)

    # Plotting the original and reconstruction from the decompositions
    fig = plt.figure()
    ax = fig.add_subplot(1, 3, 1)
    ax.set_axis_off()
    ax.imshow(to_image(image))
    ax.set_title('original')

    ax = fig.add_subplot(1, 3, 2)
    ax.set_axis_off()
    ax.imshow(to_image(cp_reconstruction))
    ax.set_title('CP')

    ax = fig.add_subplot(1, 3, 3)
    ax.set_axis_off()
    ax.imshow(to_image(tucker_reconstruction))
    ax.set_title('Tucker')

    plt.tight_layout()
    plt.show()

**Total running time of the script:** ( 0 minutes  2.100 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_image_compression.py <plot_image_compression.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_image_compression.ipynb <plot_image_compression.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
